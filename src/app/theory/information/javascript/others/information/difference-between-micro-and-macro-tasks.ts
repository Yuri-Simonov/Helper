import { IInfo } from '@types';

export const DIFFERENCE_BETWEEN_MICRO_AND_MACRO_TASKS: IInfo = {
    title: 'Разница между микро и макрозадачами',
    body: `<p>
                В JavaScript цикл событий (event loop) управляет выполнением кода, обработкой событий и выполнением
                задач. Задачи делятся на две основные категории: макрозадачи (macrotasks) и микрозадачи (microtasks).
                Понимание их различий важно для управления асинхронным поведением и порядком выполнения кода.
            </p>
            <p>
                <span class="attention"
                    >Макрозадачи включают более крупные задачи, которые выполняются в каждом цикле событий</span
                >. Примеры макрозадач:
            </p>
            <ul>
                <li>функции <code>setTimeout</code> и <code>setInterval</code>;</li>
                <li>События DOM-дерева.</li>
            </ul>
            <p>
                Макрозадачи добавляются в очередь макрозадач (macrotask queue).
                <span class="attention"
                    >Цикл событий обрабатывает их по одной, выполняя их после завершения текущего стека вызовов и всех
                    микрозадач</span
                >.
            </p>
            <p>
                <span class="attention"
                    >Микрозадачи включают более мелкие задачи, которые выполняются после текущего стека вызовов, но
                    перед следующей макрозадачей</span
                >. Примеры микрозадач:
            </p>
            <ul>
                <li><code>Promise.then</code>, <code>Promise.catch</code> и <code>Promise.finally</code>;</li>
                <li><code>MutationObserver</code>.</li>
            </ul>
            <p>
                Микрозадачи добавляются в очередь микрозадач (microtask queue). После завершения текущего стека вызовов
                цикл событий выполняет все микрозадачи в очереди перед переходом к следующей макрозадаче.
            </p>
            <p>Пример:</p>
            <pre><code class="language-javascript">console.log('Начало выполнения кода'); // Выполняется немедленно

setTimeout(() => {
  	console.log('setTimeout'); // Макрозадача, выполняется позже
}, 0);

Promise.resolve()
	.then(() => {
		console.log('1-ый Promise'); // Микрозадача, выполняется перед макрозадачей
	})
	.then(() => {
		console.log('2-ой Promise'); // Ещё одна микрозадача
	});

console.log('Конец выполнения кода'); // Выполняется немедленно
</code></pre>
            <p>В консоли браузера мы увидим следующую последовательность:</p>
            <pre><code class="language-javascript">start
Начало выполнения кода
1-ый Promise
2-ой Promise
setTimeout
Конец выполнения кода</code></pre>
            <p>
                В примере выше сначала выполнятся синхронные операции, выдающие сообщения "Начало выполнения кода" и
                "Конец выполнения кода". Затем происходит выполнение микрозадач, поэтому далее выводятся сообщения "1-й
                Promise" и "2-й Promise". И в самом конце остается одна макрозадача, которая выводит сообщение
                "setTimeout".
            </p>
            <p>Итак, какие можно выделить основные различия макрозадач и микрозадач:</p>
            <ul>
                <li>
                    <span class="attention">Приоритет</span>. Микрозадачи имеют более высокий приоритет и выполняются
                    перед макрозадачами.
                </li>
                <li>
                    <span class="attention">Время выполнения</span>. Микрозадачи выполняются сразу после текущего стека
                    вызовов, но до выполнения любой следующей макрозадачи.
                </li>
            </ul>
            <p>Теперь у вас не должно возникать сомнений в том, что сработает раньше в коде.</p>`,
    selected: false,
    lastUpdate: '18.07.2024',
};
