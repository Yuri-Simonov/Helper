import { IInfo } from 'src/app/shared/interfaces';

export const GIT_STASH: IInfo = {
    title: 'Временное сохранение изменений в <span class="variable">git</span> без коммита',
    body: `<p>
		Часто бывают ситуации, когда нужно переключиться между ветками,
		но <code>git</code> не дает этого сделать, т.к. у нас в текущей
		ветке есть изменения в файлах. Для этого в
		<code>git</code> есть соответствующая команда, которая
		<span class="attention"
			>дает возможность поместить текущие изменения в условный
			буфер обмена</span
		>
		(как будто вы сделали Ctrl+X и куда-то вставили):
	</p>
	<pre><code class="language-typescript">git stash</code></pre>
	<p>
		Делать такие временные сохранения можно сколь угодно раз. И все
		свои такие вот "сохранения" можно посмотреть с помощью команды:
	</p>
	<pre><code class="language-typescript">git stash list</code></pre>
	<p>
		После того, как вы вернулись в ветку, в которой изначально
		делали разработку, вы можете вернуть все изменения, которые
		временно сохранили до этого в <code>stash</code>, с помощью
		команды:
	</p>
	<pre><code class="language-typescript">git stash apply</code></pre>
	<p>
		Данная команда применит изменения, которые вы положили в самый
		последний свой <code>stash</code>, учтите это.
	</p>
	<p>
		Если вам нужно вернуть конкретные изменения из временного
		хранилища, то воспользуйтесь командой:
	</p>
	<pre><code class="language-typescript">git stash apply номер_состояния // номер находится в [] скобках</code></pre>
	<p>
		Если вы больше не хотите хранить временные изменения после того,
		как обратно их применили к текущей ветке, воспользуйтесь
		командой:
	</p>
	<pre><code class="language-typescript">git stash pop</code></pre>
	<p>
		После данной команды,
		<span class="attention">
			сохраненные изменения сотрутся из временного
			хранилища</span
		>. Это бывает полезно, когда вы не хотите захламлять свое
		временное хранилище.
	</p>
	<p>
		Есть также возможность давать свои названия изменениям, когда
		они помещаются во временное хранилище:
	</p>
	<pre><code class="language-typescript">git stash "название_для_изменений"</code></pre>
	<p>
		Если вам помимо изменений нужно еще и созданные файлы и папки
		отправить во временное хранилище, нужно добавить следующий флаг:
	</p>
	<pre><code class="language-typescript">git stash -u</code></pre>
	<p>
		Теперь давайте разберем команды, которые помогут почистить весь
		тот бардак, который мы устроили во временном хранилище.
	</p>
	<p>
		Если нужно удалить все сохранённые в
		<code>stash</code> состояния:
	</p>
	<pre><code class="language-typescript">git stash clear</code></pre>
	<p>
		Если нужно удалить последнее состояние во временном хранилище:
	</p>
	<pre><code class="language-typescript">git stash drop</code></pre>
	<p>
		Если нужно удалить конкретное состояние из списка во временном
		хранилище:
	</p>
	<pre><code class="language-typescript">git stash drop stash@{номер_состояния}</code></pre>`,
    selected: false,
    lastUpdate: '29.06.2023',
};
