import { IInfo } from 'src/app/shared/interfaces';

export const AUTHORIZATION: IInfo = {
    title: 'Принцип работы авторизации',
    body: `<p>
                <span class="attention"
                    >Авторизация — это процесс проверки и предоставления пользователю доступа к ресурсам на основе его
                    учетных данных</span
                >. Современные системы авторизации часто используют токены для повышения безопасности и удобства.
            </p>
            <img
                src="assets/img/others/auth/refresh-token-flow.png"
                class="large-img"
                alt="Процесс обновления токенов"
            />
            <p>
                На картинке выше показан процесс создания и обновления необходимых токенов. Давайте разберем по пунктам:
            </p>
            <ol>
                <li>
                    Отправка данных (логин и пароль) на сервер (допустим мы уже зарегистрировались и хотим
                    авторизоваться в системе). Этот этап называется <span class="attention">аутентификацией</span>;
                </li>
                <li>
                    Если данные валидны, то в ответе от сервера мы получаем 2 токена: <code>accessToken</code> (<span
                        class="attention"
                        >токен доступа, который используется для доступа к защищенным ресурсам на сервере</span
                    >) и <code>refreshToken</code> (<span class="attention"
                        >токен обновления, который используется для получения нового accessToken после истечения срока
                        действия старого</span
                    >);
                </li>
                <li>
                    Допустим мы хотим зайти на страницу сайта, которая доступна только авторизованным пользователям.
                    Когда мы нажимаем на ссылку, чтобы перейти на другую страницу, в заголовок запроса включается
                    <code>accessToken</code>;
                </li>
                <li>Если он валидный, то мы получаем добро от сервера;</li>
                <li>
                    Обычно <code>accessToken</code> недолговечен (живет в среднем 10 минут). Допустим мы авторизовались
                    в системе и прошел час с того момента. <code>accessToken</code>, скорее всего, уже просрочился, а мы
                    пытаемся сделать с ним запрос к серверу...;
                </li>
                <li>
                    На сервере наш текущий <code>accessToken</code> уже невалиден, поэтому сервер отвечает, что мы не
                    авторизованы;
                </li>
                <li>
                    Тут в игру уже вступает <code>refreshToken</code>. На сервер отправляется запрос, содержащий
                    <code>refreshToken</code>, с целью получения нового <code>accessToken</code>;
                </li>
                <li>
                    Если <code>refreshToken</code> валиден, то в ответе от сервера мы получаем новый
                    <code>accessToken</code>.
                </li>
            </ol>
            <i class="subtitle">Зачем нужны эти токены?</i>
            <ul>
                <li>
                    <span class="attention">Безопасность</span>: использование краткосрочных
                    <code>accessToken</code> снижает риск злоупотребления ими. Даже если токен будет украден, он скоро
                    истечет;
                </li>
                <li>
                    <span class="attention">Удобство</span>: пользователь не должен вводить свои учетные данные каждый
                    раз при истечении <code>accessToken</code>, достаточно использовать <code>refreshToken</code> для
                    автоматического обновления;
                </li>
                <li>
                    <span class="attention">Разграничение доступа</span>: можно легко аннулировать
                    <code>accessToken</code> и <code>refreshToken</code> (например, при выходе пользователя), что
                    обеспечивает контроль над доступом к ресурсам.
                </li>
            </ul>
            <i class="subtitle">Где хранятся токены?</i>
            <p>
                Токены обычно хранятся на стороне клиента (например в <code>localStorage</code>, <code>sessionStorage</code> или
                <code>cookies</code>), поскольку они используются для аутентификации каждого запроса
                к защищенным ресурсам.
            </p>
			<i class="subtitle">Итого</i>
            <p><span class="attention">Аутентификация проверяет личность пользователя</span> (благодаря отправленным логину и паролю на сервер).</p>
            <p><span class="attention">Авторизация определяет разрешения на доступ к определенным ресурсам</span>. Когда пользователь хочет получить доступ к файлу в своей организации, ему сначала нужно пройти аутентификацию, чтобы подтвердить свою личность.</p>`,
    selected: false,
    lastUpdate: '08.10.2024',
};
